let mapArray, ctx, currentImgMain;
let imgMountain, imgMain, imgEnemy, imgFlag;
const gridLength = 75;

function loadImages(sources, callback) {
    var images = {};
    var loadedImages = 0;
    var numImages = 0;
    // get num of sources
    for (var src in sources) {
        numImages++;
    }
    for (var src in sources) {
        images[src] = new Image();
        images[src].onload = function () {
            if (++loadedImages >= numImages) {
                callback(images);
            }
        };
        images[src].src = sources[src];
    }
};

// initial
$(function(){
    // 0: available, 1: Mountain, 2: Final Stop, 3: Enemy
    mapArray = [
        [0, 1, 1, 1, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 1, 2]
    ];
    ctx = $("#myCanvas")[0].getContext("2d");

    imgMain = new Image();
    imgMain.src = "images/spriteSheet.png";
    currentImgMain = {
        x: 0,
        y: 0
    };

    imgMain.onload = function(){
        ctx.drawImage(imgMain, 0, 0, 80, 130, currentImgMain.x, currentImgMain.y, gridLength, gridLength);
    };

    let sources = {
        mountain: "images/material.png",
        enemy: "images/Enemy.png",
        flag: "images/redFlag.png"
    };

    loadImages(sources, function(images){
        for (let x in mapArray) {
            for (let y in mapArray[x]) {
                if (mapArray[x][y] === 1) {
                    ctx.drawImage(images.mountain, 32, 65, 32, 32, y * gridLength, x * gridLength, gridLength, gridLength);
                }
                if (mapArray[x][y] === 3) {
                    ctx.drawImage(images.enemy, 7, 40, 104, 135, y * gridLength, x * gridLength, gridLength, gridLength);
                }
                if (mapArray[x][y] == 2) {
                    ctx.drawImage(images.flag, y * gridLength, x * gridLength, gridLength, gridLength);
                }
            }
        }
        setInterval(function() {
            for (let x in mapArray) {
                for (let y in mapArray[x]) {
                    if (mapArray[x][y] === 3) {
                        ctx.clearRect(y * gridLength, x * gridLength, gridLength, gridLength);
                        mapArray[x][y] = 0;
                    }
                }
            }
            let enemyX = Math.floor(Math.random() * mapArray.length);
            let enemyY = Math.floor(Math.random() * mapArray[0].length);
            if (mapArray[enemyX][enemyY] === 0) {
                ctx.drawImage(images.enemy, 7, 40, 104, 135, enemyY * gridLength, enemyX * gridLength, gridLength, gridLength);
                mapArray[enemyX][enemyY] = 3;
            }
        }, 2000);
    });

});

// Click Event
$(document).on("keydown", function(event){
    console.log(event.code);
    let targetImg, targetBlock, cutImagePositionX;
    targetImg = {
        x: -1,
        y: -1
    };
    targetBlock = {
        x: -1,
        y: -1
    };
    event.preventDefault();
    switch(event.code){
        case "ArrowLeft":
            targetImg.x = currentImgMain.x - gridLength;
            targetImg.y = currentImgMain.y;
            cutImagePositionX = 175;
            break;
        case "ArrowUp":
            targetImg.x = currentImgMain.x;
            targetImg.y = currentImgMain.y - gridLength;
            cutImagePositionX = 355;
            break;
        case "ArrowRight":
            targetImg.x = currentImgMain.x + gridLength;
            targetImg.y = currentImgMain.y;
            cutImagePositionX = 540;
            break;
        case "ArrowDown":
            targetImg.x = currentImgMain.x;
            targetImg.y = currentImgMain.y + gridLength;
            cutImagePositionX = 0;
            break;
        default:
            return;
    }

    if (targetImg.x <= (gridLength * (mapArray[0].length - 1)) && targetImg.x >= 0 && targetImg.y <= (gridLength * (mapArray.length - 1)) && targetImg.y >= 0) {
        targetBlock.x = targetImg.y / gridLength;
        targetBlock.y = targetImg.x / gridLength;
    } else {
        targetBlock.x = -1;
        targetBlock.y = -1;
    }

    if (targetBlock.x !== -1 && targetBlock.y !== -1 && mapArray[targetBlock.x][targetBlock.y] !== 1 && mapArray[targetBlock.x][targetBlock.y] !== 3) {
        ctx.clearRect(currentImgMain.x, currentImgMain.y, gridLength, gridLength);
        currentImgMain.x = targetImg.x;
        currentImgMain.y = targetImg.y;
        ctx.drawImage(imgMain, cutImagePositionX, 0, 80, 130, currentImgMain.x, currentImgMain.y, gridLength, gridLength);
        if (mapArray[targetBlock.x][targetBlock.y] === 2) {
            alert("成功了！");
            location.reload();
        }
    } else if (mapArray[targetBlock.x][targetBlock.y] === 3) {
        alert("失敗了！");
        location.reload();
    }
});
